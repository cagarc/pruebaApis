/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.constante.EstadoVacunacion;
import io.swagger.constante.TipoVacuna;
import io.swagger.model.EmpleadoDto;
import io.swagger.model.EmpleadoReporte;
import io.swagger.model.MensajeSalida;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.sql.Date;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-06-12T02:03:20.587Z[GMT]")
@Validated
public interface EmpleadoApi {

	@Operation(summary = "INICIA PROCESO DE CREAR EMPLEADO", description = "", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "OK", content = @Content(schema = @Schema(implementation = EmpleadoDto.class))),

			@ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = MensajeSalida.class))),

			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = MensajeSalida.class))) })
	@RequestMapping(value = "/empleado/registroEmpleado", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<?> postRegistroEmpleado(
			@Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema()) @Valid @RequestBody EmpleadoDto body);

	@Operation(summary = "INICIA PROCESO DE ACTUALIZAR EMPLEADO", description = "", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EmpleadoDto.class))),

			@ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MensajeSalida.class))),

			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MensajeSalida.class))) })
	@RequestMapping(value = "/empleado/actualizarEmpleado", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<?> putAutualizarEmpleado(
			@Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema()) @Valid @RequestBody EmpleadoDto body);

	@Operation(summary = "INICIA PROCESO DE ELIMINAR EMPLEADO", description = "", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MensajeSalida.class))),

			@ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MensajeSalida.class))),

			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MensajeSalida.class))) })
	@RequestMapping(value = "/empleado/registroEmpleado/{cedula}", produces = {
			"application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<?> deleteEliminarEmpleado(
			@Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema()) @Valid @PathVariable String cedula);

	@Operation(summary = "INICIA PROCESO DE CONSULTA EMPLEADO", description = "", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "OK", content = @Content(array = @ArraySchema(schema = @Schema(implementation = EmpleadoDto.class)))),

			@ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MensajeSalida.class))),

			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MensajeSalida.class))) })
	@RequestMapping(value = "/empleado/consultaEmpleado", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<?> getConsultaEmpleado();
	
	@Operation(summary = "INICIA PROCESO DE CONSULTA EMPLEADO X ESTADO DE VACUNACION", description = "", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "OK", content = @Content(array = @ArraySchema(schema = @Schema(implementation = EmpleadoReporte.class)))),

			@ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MensajeSalida.class))),

			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MensajeSalida.class))) })
	@RequestMapping(value = "/empleado/empleadoXVacunacion/{estadoVacunacion}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<?> getConsultaEmpleadoXVacunacion(@PathVariable EstadoVacunacion estadoVacunacion);
	
	@Operation(summary = "INICIA PROCESO DE CONSULTA EMPLEADO X TIPO DE VACUNACION", description = "", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "OK", content = @Content(array = @ArraySchema(schema = @Schema(implementation = EmpleadoReporte.class)))),

			@ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MensajeSalida.class))),

			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MensajeSalida.class))) })
	@RequestMapping(value = "/empleado/empleadoXVacunacion/{tipoVacuna}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<?> getConsultaEmpleadoXTipoVacunacion(@PathVariable TipoVacuna tipoVacuna);
	
	@Operation(summary = "INICIA PROCESO DE CONSULTA EMPLEADO X TIPO DE VACUNACION", description = "", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "OK", content = @Content(array = @ArraySchema(schema = @Schema(implementation = EmpleadoReporte.class)))),

			@ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MensajeSalida.class))),

			@ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MensajeSalida.class))) })
	@RequestMapping(value = "/empleado/getConsultaEmpleadoXFecha/{fechaInicia}/{fechaFin}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<?> getConsultaEmpleadoXFecha(@PathVariable Date fechaInicia,@PathVariable Date fechaFin);

}
